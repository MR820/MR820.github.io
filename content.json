[{"title":"go朝花夕拾","date":"2021-09-10T02:22:32.000Z","path":"2021/09/10/go朝花夕拾/","comments":true,"excerpt":"引用类型slice map channel interface func都是引用类型 除引用类型外的其他类型都是值类型","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/tags/go/"}]},{"title":"网络编程","date":"2021-08-08T05:38:11.000Z","path":"2021/08/08/网络编程/","comments":true,"excerpt":"网络通信——tcp/ip协议 socket编程Socket是应用层与TCP/IP协议族通信的中间软件抽象层。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket后面，对用户来说只需要调用Socket规定的相关函数，让Socket去组织符合指定的协议数据然后进行通信。","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://note.wyxxt.org.cn/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"Elasticsearch","date":"2021-08-02T05:42:53.000Z","path":"2021/08/02/Elasticsearch/","comments":true,"excerpt":"Elasticsearch是什么elastic官网 存储、搜索、分析 PB级数据，近实时","categories":[{"name":"中间件","slug":"中间件","permalink":"https://note.wyxxt.org.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://note.wyxxt.org.cn/tags/Elasticsearch/"}]},{"title":"本地缓存","date":"2021-08-01T12:13:25.000Z","path":"2021/08/01/本地缓存/","comments":true,"excerpt":"本地缓存的意义很多人可能想问，为什么有了redis中间件这种分布式缓存，还需要讨论本地缓存有什么意义？ 本地缓存是在程序进程中专门运行的线程或协程维护的，会随着程序的关闭而失效。","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"cache","slug":"cache","permalink":"https://note.wyxxt.org.cn/tags/cache/"}]},{"title":"熔断降级","date":"2021-08-01T12:09:13.000Z","path":"2021/08/01/熔断降级/","comments":true,"excerpt":"概念接口限流 与接口限流不同的是，熔断降级在调用端使用。而接口限流是在被调用端做的限制。","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"熔断降级","slug":"熔断降级","permalink":"https://note.wyxxt.org.cn/tags/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7/"}]},{"title":"链路追踪","date":"2021-08-01T12:08:49.000Z","path":"2021/08/01/链路追踪/","comments":true,"excerpt":"什么是分布式追踪分布式系统多台计算机通过网络组成了一个庞大的系统，这个系统即是分布式系统。 在微服务或者云原生开发中，一般认为分布式系统是通过各种中间件/服务网格连接的，这些中间件提供了共享资源、功能(API等)、文件等，使得整个网络可以当作一台计算机进行工作。","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"链路追踪","slug":"链路追踪","permalink":"https://note.wyxxt.org.cn/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"}]},{"title":"注册中心","date":"2021-08-01T12:08:31.000Z","path":"2021/08/01/注册中心/","comments":true,"excerpt":"什么是服务注册中心服务注册中心是服务实现服务化管理的核心组件，类似于目录服务的作用，主要用来存储服务信息，譬如提供者url 串、路由信息等。 服务注册中心是微服务架构中最基础的设施之一。 注册中心可以说是微服务架构中的“通讯录”，它记录了服务和服务地址的映射关系。","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"注册中心","slug":"注册中心","permalink":"https://note.wyxxt.org.cn/tags/%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"}]},{"title":"配置中心","date":"2021-08-01T12:08:25.000Z","path":"2021/08/01/配置中心/","comments":true,"excerpt":"什么是配置中心配置中心，顾名思义，将配置中心化，说白了就是将配置从应用中抽取出来，统一管理，优雅的解决了配置的动态变更、权限管理、持久化、运维成本等问题。 配置与应用程序隔离开，单独管理配置。 总得来说，配置中心就是一种统一管理各种应用配置的基础服务组件。","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"apollo","slug":"apollo","permalink":"https://note.wyxxt.org.cn/tags/apollo/"},{"name":"配置中心","slug":"配置中心","permalink":"https://note.wyxxt.org.cn/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"}]},{"title":"网关","date":"2021-08-01T11:42:30.000Z","path":"2021/08/01/网关/","comments":true,"excerpt":"流量网关和业务网关流量网关 全局性流控 日志统计 防止 SQL 注入 防止 Web 攻击 屏蔽工具扫描 黑白名单控制","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"网关","slug":"网关","permalink":"https://note.wyxxt.org.cn/tags/%E7%BD%91%E5%85%B3/"}]},{"title":"protobuf与gRPC","date":"2021-08-01T08:13:33.000Z","path":"2021/08/01/protobuf与gRPC/","comments":true,"excerpt":"protobuf概念protobuf是 Google 的语言中立、平台中立、可扩展的结构化数据序列化机制——想想 XML，但更小、更快、更简单。您可以定义一次数据的结构化方式，然后您可以使用特殊生成的源代码轻松地使用各种语言在各种数据流中写入和读取结构化数据。","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"protobuf","slug":"protobuf","permalink":"https://note.wyxxt.org.cn/tags/protobuf/"},{"name":"gRPC","slug":"gRPC","permalink":"https://note.wyxxt.org.cn/tags/gRPC/"}]},{"title":"秒杀系统","date":"2021-07-22T09:10:46.000Z","path":"2021/07/22/秒杀系统/","comments":true,"excerpt":"什么是秒杀短时间（瞬时），大量请求，买一个（数量少）商品 解决：高并发（读，写）","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"秒杀","slug":"秒杀","permalink":"https://note.wyxxt.org.cn/tags/%E7%A7%92%E6%9D%80/"}]},{"title":"redis","date":"2021-07-18T07:32:03.000Z","path":"2021/07/18/redis/","comments":true,"excerpt":"常见问题存储选型","categories":[{"name":"微服务","slug":"微服务","permalink":"https://note.wyxxt.org.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://note.wyxxt.org.cn/tags/redis/"}]},{"title":"网络与IO模型","date":"2021-07-17T05:39:39.000Z","path":"2021/07/17/网络与IO模型/","comments":true,"excerpt":"常见问题tcp-ip协议","categories":[{"name":"网络","slug":"网络","permalink":"https://note.wyxxt.org.cn/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"网络","slug":"网络","permalink":"https://note.wyxxt.org.cn/tags/%E7%BD%91%E7%BB%9C/"},{"name":"io","slug":"io","permalink":"https://note.wyxxt.org.cn/tags/io/"}]},{"title":"go优化","date":"2021-07-04T07:32:20.000Z","path":"2021/07/04/go优化/","comments":true,"excerpt":"逃逸分析在 C 语言中，可以使用 malloc 和 free 手动在堆上分配和回收内存。Go 语言中，堆内存是通过垃圾回收机制自动管理的，无需开发者指定。那么，Go 编译器怎么知道某个变量需要分配在栈上，还是堆上呢？**编译器决定内存分配位置的方式，就称之为逃逸分析(escape analysis)**。逃逸分析由编译器完成，作用于编译阶段。","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://note.wyxxt.org.cn/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"go问题排查","date":"2021-07-04T06:40:42.000Z","path":"2021/07/04/go问题排查/","comments":true,"excerpt":"trace如何观察go gc GODEBUG=gctrace=1 123456go build main.go -o mainGODEBUGE=gctrace=1 ./mainGODEBUG=gctrace=1 go run main.go# GODEBUG 参数还有 schedtrace=1 scheddetail=1 Go Runtime Scheduler 状态信息","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"问题排查","slug":"问题排查","permalink":"https://note.wyxxt.org.cn/tags/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"}]},{"title":"go语言unsafe","date":"2021-07-03T04:20:50.000Z","path":"2021/07/03/go语言unsafe/","comments":true,"excerpt":"unsafe包golang是一种静态的强类型的语言，所有的类型都是不能随意转换的，Go语言是不允许两个指针类型进行转换的。go官方是不推荐使用unsafe的操作因为它是不安全的，它绕过了golang的内存安全原则，容易使你的程序出现莫名其妙的问题，不利于程序的扩展与维护。但是在很多地方却是很实用。在一些go底层的包中unsafe包被很频繁的使用。","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"unsafe","slug":"unsafe","permalink":"https://note.wyxxt.org.cn/tags/unsafe/"}]},{"title":"go语言context","date":"2021-07-03T04:19:30.000Z","path":"2021/07/03/go语言context/","comments":true,"excerpt":"Go Concurrency Patterns: Context介绍在 Go 服务器中，每个传入请求都在其自己的 goroutine 中处理。请求处理程序通常会启动额外的 goroutine 来访问后端，例如数据库和 RPC 服务。处理请求的一组 goroutine 通常需要访问特定于请求的值，例如最终用户的身份、授权令牌和请求的截止日期。当请求被取消或超时时，处理该请求的所有 goroutine 都应该快速退出，以便系统可以回收它们正在使用的任何资源。","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"context","slug":"context","permalink":"https://note.wyxxt.org.cn/tags/context/"}]},{"title":"go并发编程","date":"2021-07-03T02:21:08.000Z","path":"2021/07/03/go并发编程/","comments":true,"excerpt":"goroutine调度gorountine是一个用户态级别的类线程，所以它的堆栈也必然是在用户态的调度器中进行管理的 GMP","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"并发","slug":"并发","permalink":"https://note.wyxxt.org.cn/tags/%E5%B9%B6%E5%8F%91/"}]},{"title":"go反射","date":"2021-07-01T10:35:04.000Z","path":"2021/07/01/go反射/","comments":true,"excerpt":"反射在reflect包中，主要通过Typeof()和Valueof()两个方法来实现反射。两个方法相互结合，能够反射出被反射函数的全部信息。","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"反射","slug":"反射","permalink":"https://note.wyxxt.org.cn/tags/%E5%8F%8D%E5%B0%84/"}]},{"title":"go内存管理","date":"2021-07-01T03:30:11.000Z","path":"2021/07/01/go内存管理/","comments":true,"excerpt":"指针go语言没有指针运算 &amp; 取地址符 *指针可以指向任何类型 以下面代码为例，指针指向int类型","categories":[{"name":"go","slug":"go","permalink":"https://note.wyxxt.org.cn/categories/go/"}],"tags":[{"name":"内存管理","slug":"内存管理","permalink":"https://note.wyxxt.org.cn/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"name":"GC","slug":"GC","permalink":"https://note.wyxxt.org.cn/tags/GC/"}]}]